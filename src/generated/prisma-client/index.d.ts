// Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  pokemon: (where?: PokemonWhereInput) => Promise<boolean>;
  type: (where?: TypeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  pokemon: (where: PokemonWhereUniqueInput) => PokemonPromise;
  pokemons: (
    args?: {
      where?: PokemonWhereInput;
      orderBy?: PokemonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Pokemon>;
  pokemonsConnection: (
    args?: {
      where?: PokemonWhereInput;
      orderBy?: PokemonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PokemonConnectionPromise;
  type: (where: TypeWhereUniqueInput) => TypePromise;
  types: (
    args?: {
      where?: TypeWhereInput;
      orderBy?: TypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Type>;
  typesConnection: (
    args?: {
      where?: TypeWhereInput;
      orderBy?: TypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TypeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPokemon: (data: PokemonCreateInput) => PokemonPromise;
  updatePokemon: (
    args: { data: PokemonUpdateInput; where: PokemonWhereUniqueInput }
  ) => PokemonPromise;
  updateManyPokemons: (
    args: { data: PokemonUpdateManyMutationInput; where?: PokemonWhereInput }
  ) => BatchPayloadPromise;
  upsertPokemon: (
    args: {
      where: PokemonWhereUniqueInput;
      create: PokemonCreateInput;
      update: PokemonUpdateInput;
    }
  ) => PokemonPromise;
  deletePokemon: (where: PokemonWhereUniqueInput) => PokemonPromise;
  deleteManyPokemons: (where?: PokemonWhereInput) => BatchPayloadPromise;
  createType: (data: TypeCreateInput) => TypePromise;
  updateType: (
    args: { data: TypeUpdateInput; where: TypeWhereUniqueInput }
  ) => TypePromise;
  updateManyTypes: (
    args: { data: TypeUpdateManyMutationInput; where?: TypeWhereInput }
  ) => BatchPayloadPromise;
  upsertType: (
    args: {
      where: TypeWhereUniqueInput;
      create: TypeCreateInput;
      update: TypeUpdateInput;
    }
  ) => TypePromise;
  deleteType: (where: TypeWhereUniqueInput) => TypePromise;
  deleteManyTypes: (where?: TypeWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  pokemon: (
    where?: PokemonSubscriptionWhereInput
  ) => PokemonSubscriptionPayloadSubscription;
  type: (
    where?: TypeSubscriptionWhereInput
  ) => TypeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PokemonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nationalNumber_ASC"
  | "nationalNumber_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "height_ASC"
  | "height_DESC"
  | "weight_ASC"
  | "weight_DESC"
  | "hp_ASC"
  | "hp_DESC"
  | "attack_ASC"
  | "attack_DESC"
  | "defense_ASC"
  | "defense_DESC"
  | "artwork_ASC"
  | "artwork_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface TypeUpdateManyWithoutStrongWithInput {
  create?:
    | TypeCreateWithoutStrongWithInput[]
    | TypeCreateWithoutStrongWithInput;
  delete?: TypeWhereUniqueInput[] | TypeWhereUniqueInput;
  connect?: TypeWhereUniqueInput[] | TypeWhereUniqueInput;
  set?: TypeWhereUniqueInput[] | TypeWhereUniqueInput;
  disconnect?: TypeWhereUniqueInput[] | TypeWhereUniqueInput;
  update?:
    | TypeUpdateWithWhereUniqueWithoutStrongWithInput[]
    | TypeUpdateWithWhereUniqueWithoutStrongWithInput;
  upsert?:
    | TypeUpsertWithWhereUniqueWithoutStrongWithInput[]
    | TypeUpsertWithWhereUniqueWithoutStrongWithInput;
  deleteMany?: TypeScalarWhereInput[] | TypeScalarWhereInput;
  updateMany?:
    | TypeUpdateManyWithWhereNestedInput[]
    | TypeUpdateManyWithWhereNestedInput;
}

export type PokemonWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  nationalNumber?: Int;
  name?: String;
}>;

export interface PokemonCreateManyWithoutTypeInput {
  create?: PokemonCreateWithoutTypeInput[] | PokemonCreateWithoutTypeInput;
  connect?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
}

export interface PokemonUpsertWithWhereUniqueWithoutPreviousEvolutionsInput {
  where: PokemonWhereUniqueInput;
  update: PokemonUpdateWithoutPreviousEvolutionsDataInput;
  create: PokemonCreateWithoutPreviousEvolutionsInput;
}

export interface PokemonCreateWithoutTypeInput {
  nationalNumber: Int;
  name: String;
  height?: Float;
  weight?: Float;
  hp?: Int;
  attack?: Int;
  defense?: Int;
  artwork?: String;
  previousEvolutions?: PokemonCreateManyWithoutPreviousEvolutionsInput;
  nextEvolutions?: PokemonCreateManyWithoutNextEvolutionsInput;
}

export interface TypeUpdateManyWithoutWeakWithInput {
  create?: TypeCreateWithoutWeakWithInput[] | TypeCreateWithoutWeakWithInput;
  delete?: TypeWhereUniqueInput[] | TypeWhereUniqueInput;
  connect?: TypeWhereUniqueInput[] | TypeWhereUniqueInput;
  set?: TypeWhereUniqueInput[] | TypeWhereUniqueInput;
  disconnect?: TypeWhereUniqueInput[] | TypeWhereUniqueInput;
  update?:
    | TypeUpdateWithWhereUniqueWithoutWeakWithInput[]
    | TypeUpdateWithWhereUniqueWithoutWeakWithInput;
  upsert?:
    | TypeUpsertWithWhereUniqueWithoutWeakWithInput[]
    | TypeUpsertWithWhereUniqueWithoutWeakWithInput;
  deleteMany?: TypeScalarWhereInput[] | TypeScalarWhereInput;
  updateMany?:
    | TypeUpdateManyWithWhereNestedInput[]
    | TypeUpdateManyWithWhereNestedInput;
}

export interface PokemonCreateManyWithoutPreviousEvolutionsInput {
  create?:
    | PokemonCreateWithoutPreviousEvolutionsInput[]
    | PokemonCreateWithoutPreviousEvolutionsInput;
  connect?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface PokemonCreateWithoutPreviousEvolutionsInput {
  nationalNumber: Int;
  name: String;
  height?: Float;
  weight?: Float;
  hp?: Int;
  attack?: Int;
  defense?: Int;
  type?: TypeCreateManyWithoutPokemonsInput;
  artwork?: String;
  nextEvolutions?: PokemonCreateManyWithoutNextEvolutionsInput;
}

export interface PokemonSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PokemonWhereInput;
  AND?: PokemonSubscriptionWhereInput[] | PokemonSubscriptionWhereInput;
  OR?: PokemonSubscriptionWhereInput[] | PokemonSubscriptionWhereInput;
  NOT?: PokemonSubscriptionWhereInput[] | PokemonSubscriptionWhereInput;
}

export interface PokemonCreateManyWithoutNextEvolutionsInput {
  create?:
    | PokemonCreateWithoutNextEvolutionsInput[]
    | PokemonCreateWithoutNextEvolutionsInput;
  connect?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
}

export interface UserUpdateInput {
  name?: String;
}

export interface PokemonCreateWithoutNextEvolutionsInput {
  nationalNumber: Int;
  name: String;
  height?: Float;
  weight?: Float;
  hp?: Int;
  attack?: Int;
  defense?: Int;
  type?: TypeCreateManyWithoutPokemonsInput;
  artwork?: String;
  previousEvolutions?: PokemonCreateManyWithoutPreviousEvolutionsInput;
}

export interface TypeUpdateManyMutationInput {
  name?: String;
}

export interface PokemonUpdateInput {
  nationalNumber?: Int;
  name?: String;
  height?: Float;
  weight?: Float;
  hp?: Int;
  attack?: Int;
  defense?: Int;
  type?: TypeUpdateManyWithoutPokemonsInput;
  artwork?: String;
  previousEvolutions?: PokemonUpdateManyWithoutPreviousEvolutionsInput;
  nextEvolutions?: PokemonUpdateManyWithoutNextEvolutionsInput;
}

export type TypeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface TypeUpdateManyWithoutPokemonsInput {
  create?: TypeCreateWithoutPokemonsInput[] | TypeCreateWithoutPokemonsInput;
  delete?: TypeWhereUniqueInput[] | TypeWhereUniqueInput;
  connect?: TypeWhereUniqueInput[] | TypeWhereUniqueInput;
  set?: TypeWhereUniqueInput[] | TypeWhereUniqueInput;
  disconnect?: TypeWhereUniqueInput[] | TypeWhereUniqueInput;
  update?:
    | TypeUpdateWithWhereUniqueWithoutPokemonsInput[]
    | TypeUpdateWithWhereUniqueWithoutPokemonsInput;
  upsert?:
    | TypeUpsertWithWhereUniqueWithoutPokemonsInput[]
    | TypeUpsertWithWhereUniqueWithoutPokemonsInput;
  deleteMany?: TypeScalarWhereInput[] | TypeScalarWhereInput;
  updateMany?:
    | TypeUpdateManyWithWhereNestedInput[]
    | TypeUpdateManyWithWhereNestedInput;
}

export interface PokemonUpdateManyMutationInput {
  nationalNumber?: Int;
  name?: String;
  height?: Float;
  weight?: Float;
  hp?: Int;
  attack?: Int;
  defense?: Int;
  artwork?: String;
}

export interface TypeUpdateWithWhereUniqueWithoutPokemonsInput {
  where: TypeWhereUniqueInput;
  data: TypeUpdateWithoutPokemonsDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TypeUpdateWithoutPokemonsDataInput {
  name?: String;
  strongWith?: TypeUpdateManyWithoutStrongWithInput;
  weakWith?: TypeUpdateManyWithoutWeakWithInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface PokemonUpsertWithWhereUniqueWithoutTypeInput {
  where: PokemonWhereUniqueInput;
  update: PokemonUpdateWithoutTypeDataInput;
  create: PokemonCreateWithoutTypeInput;
}

export interface TypeUpdateManyWithWhereNestedInput {
  where: TypeScalarWhereInput;
  data: TypeUpdateManyDataInput;
}

export interface TypeUpdateWithWhereUniqueWithoutStrongWithInput {
  where: TypeWhereUniqueInput;
  data: TypeUpdateWithoutStrongWithDataInput;
}

export interface TypeUpsertWithWhereUniqueWithoutWeakWithInput {
  where: TypeWhereUniqueInput;
  update: TypeUpdateWithoutWeakWithDataInput;
  create: TypeCreateWithoutWeakWithInput;
}

export interface TypeUpdateWithoutStrongWithDataInput {
  name?: String;
  weakWith?: TypeUpdateManyWithoutWeakWithInput;
  pokemons?: PokemonUpdateManyWithoutTypeInput;
}

export interface PokemonCreateInput {
  nationalNumber: Int;
  name: String;
  height?: Float;
  weight?: Float;
  hp?: Int;
  attack?: Int;
  defense?: Int;
  type?: TypeCreateManyWithoutPokemonsInput;
  artwork?: String;
  previousEvolutions?: PokemonCreateManyWithoutPreviousEvolutionsInput;
  nextEvolutions?: PokemonCreateManyWithoutNextEvolutionsInput;
}

export interface TypeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  strongWith_every?: TypeWhereInput;
  strongWith_some?: TypeWhereInput;
  strongWith_none?: TypeWhereInput;
  weakWith_every?: TypeWhereInput;
  weakWith_some?: TypeWhereInput;
  weakWith_none?: TypeWhereInput;
  pokemons_every?: PokemonWhereInput;
  pokemons_some?: PokemonWhereInput;
  pokemons_none?: PokemonWhereInput;
  AND?: TypeWhereInput[] | TypeWhereInput;
  OR?: TypeWhereInput[] | TypeWhereInput;
  NOT?: TypeWhereInput[] | TypeWhereInput;
}

export interface TypeCreateWithoutPokemonsInput {
  name: String;
  strongWith?: TypeCreateManyWithoutStrongWithInput;
  weakWith?: TypeCreateManyWithoutWeakWithInput;
}

export interface TypeUpdateWithWhereUniqueWithoutWeakWithInput {
  where: TypeWhereUniqueInput;
  data: TypeUpdateWithoutWeakWithDataInput;
}

export interface TypeCreateWithoutStrongWithInput {
  name: String;
  weakWith?: TypeCreateManyWithoutWeakWithInput;
  pokemons?: PokemonCreateManyWithoutTypeInput;
}

export interface TypeUpdateWithoutWeakWithDataInput {
  name?: String;
  strongWith?: TypeUpdateManyWithoutStrongWithInput;
  pokemons?: PokemonUpdateManyWithoutTypeInput;
}

export interface TypeCreateWithoutWeakWithInput {
  name: String;
  strongWith?: TypeCreateManyWithoutStrongWithInput;
  pokemons?: PokemonCreateManyWithoutTypeInput;
}

export interface PokemonUpdateManyWithoutTypeInput {
  create?: PokemonCreateWithoutTypeInput[] | PokemonCreateWithoutTypeInput;
  delete?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  connect?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  set?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  disconnect?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  update?:
    | PokemonUpdateWithWhereUniqueWithoutTypeInput[]
    | PokemonUpdateWithWhereUniqueWithoutTypeInput;
  upsert?:
    | PokemonUpsertWithWhereUniqueWithoutTypeInput[]
    | PokemonUpsertWithWhereUniqueWithoutTypeInput;
  deleteMany?: PokemonScalarWhereInput[] | PokemonScalarWhereInput;
  updateMany?:
    | PokemonUpdateManyWithWhereNestedInput[]
    | PokemonUpdateManyWithWhereNestedInput;
}

export interface TypeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TypeWhereInput;
  AND?: TypeSubscriptionWhereInput[] | TypeSubscriptionWhereInput;
  OR?: TypeSubscriptionWhereInput[] | TypeSubscriptionWhereInput;
  NOT?: TypeSubscriptionWhereInput[] | TypeSubscriptionWhereInput;
}

export interface PokemonUpdateWithWhereUniqueWithoutTypeInput {
  where: PokemonWhereUniqueInput;
  data: PokemonUpdateWithoutTypeDataInput;
}

export interface UserCreateInput {
  name: String;
}

export interface PokemonUpdateWithoutTypeDataInput {
  nationalNumber?: Int;
  name?: String;
  height?: Float;
  weight?: Float;
  hp?: Int;
  attack?: Int;
  defense?: Int;
  artwork?: String;
  previousEvolutions?: PokemonUpdateManyWithoutPreviousEvolutionsInput;
  nextEvolutions?: PokemonUpdateManyWithoutNextEvolutionsInput;
}

export interface TypeCreateInput {
  name: String;
  strongWith?: TypeCreateManyWithoutStrongWithInput;
  weakWith?: TypeCreateManyWithoutWeakWithInput;
  pokemons?: PokemonCreateManyWithoutTypeInput;
}

export interface PokemonUpdateManyWithoutPreviousEvolutionsInput {
  create?:
    | PokemonCreateWithoutPreviousEvolutionsInput[]
    | PokemonCreateWithoutPreviousEvolutionsInput;
  delete?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  connect?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  set?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  disconnect?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  update?:
    | PokemonUpdateWithWhereUniqueWithoutPreviousEvolutionsInput[]
    | PokemonUpdateWithWhereUniqueWithoutPreviousEvolutionsInput;
  upsert?:
    | PokemonUpsertWithWhereUniqueWithoutPreviousEvolutionsInput[]
    | PokemonUpsertWithWhereUniqueWithoutPreviousEvolutionsInput;
  deleteMany?: PokemonScalarWhereInput[] | PokemonScalarWhereInput;
  updateMany?:
    | PokemonUpdateManyWithWhereNestedInput[]
    | PokemonUpdateManyWithWhereNestedInput;
}

export interface TypeUpsertWithWhereUniqueWithoutStrongWithInput {
  where: TypeWhereUniqueInput;
  update: TypeUpdateWithoutStrongWithDataInput;
  create: TypeCreateWithoutStrongWithInput;
}

export interface PokemonUpdateWithWhereUniqueWithoutPreviousEvolutionsInput {
  where: PokemonWhereUniqueInput;
  data: PokemonUpdateWithoutPreviousEvolutionsDataInput;
}

export interface TypeScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: TypeScalarWhereInput[] | TypeScalarWhereInput;
  OR?: TypeScalarWhereInput[] | TypeScalarWhereInput;
  NOT?: TypeScalarWhereInput[] | TypeScalarWhereInput;
}

export interface PokemonUpdateWithoutPreviousEvolutionsDataInput {
  nationalNumber?: Int;
  name?: String;
  height?: Float;
  weight?: Float;
  hp?: Int;
  attack?: Int;
  defense?: Int;
  type?: TypeUpdateManyWithoutPokemonsInput;
  artwork?: String;
  nextEvolutions?: PokemonUpdateManyWithoutNextEvolutionsInput;
}

export interface TypeCreateManyWithoutPokemonsInput {
  create?: TypeCreateWithoutPokemonsInput[] | TypeCreateWithoutPokemonsInput;
  connect?: TypeWhereUniqueInput[] | TypeWhereUniqueInput;
}

export interface PokemonUpdateManyWithoutNextEvolutionsInput {
  create?:
    | PokemonCreateWithoutNextEvolutionsInput[]
    | PokemonCreateWithoutNextEvolutionsInput;
  delete?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  connect?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  set?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  disconnect?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  update?:
    | PokemonUpdateWithWhereUniqueWithoutNextEvolutionsInput[]
    | PokemonUpdateWithWhereUniqueWithoutNextEvolutionsInput;
  upsert?:
    | PokemonUpsertWithWhereUniqueWithoutNextEvolutionsInput[]
    | PokemonUpsertWithWhereUniqueWithoutNextEvolutionsInput;
  deleteMany?: PokemonScalarWhereInput[] | PokemonScalarWhereInput;
  updateMany?:
    | PokemonUpdateManyWithWhereNestedInput[]
    | PokemonUpdateManyWithWhereNestedInput;
}

export interface TypeCreateManyWithoutWeakWithInput {
  create?: TypeCreateWithoutWeakWithInput[] | TypeCreateWithoutWeakWithInput;
  connect?: TypeWhereUniqueInput[] | TypeWhereUniqueInput;
}

export interface PokemonUpdateWithWhereUniqueWithoutNextEvolutionsInput {
  where: PokemonWhereUniqueInput;
  data: PokemonUpdateWithoutNextEvolutionsDataInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
}

export interface PokemonUpdateWithoutNextEvolutionsDataInput {
  nationalNumber?: Int;
  name?: String;
  height?: Float;
  weight?: Float;
  hp?: Int;
  attack?: Int;
  defense?: Int;
  type?: TypeUpdateManyWithoutPokemonsInput;
  artwork?: String;
  previousEvolutions?: PokemonUpdateManyWithoutPreviousEvolutionsInput;
}

export interface TypeUpsertWithWhereUniqueWithoutPokemonsInput {
  where: TypeWhereUniqueInput;
  update: TypeUpdateWithoutPokemonsDataInput;
  create: TypeCreateWithoutPokemonsInput;
}

export interface PokemonUpdateManyDataInput {
  nationalNumber?: Int;
  name?: String;
  height?: Float;
  weight?: Float;
  hp?: Int;
  attack?: Int;
  defense?: Int;
  artwork?: String;
}

export interface PokemonUpdateManyWithWhereNestedInput {
  where: PokemonScalarWhereInput;
  data: PokemonUpdateManyDataInput;
}

export interface PokemonScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  nationalNumber?: Int;
  nationalNumber_not?: Int;
  nationalNumber_in?: Int[] | Int;
  nationalNumber_not_in?: Int[] | Int;
  nationalNumber_lt?: Int;
  nationalNumber_lte?: Int;
  nationalNumber_gt?: Int;
  nationalNumber_gte?: Int;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  height?: Float;
  height_not?: Float;
  height_in?: Float[] | Float;
  height_not_in?: Float[] | Float;
  height_lt?: Float;
  height_lte?: Float;
  height_gt?: Float;
  height_gte?: Float;
  weight?: Float;
  weight_not?: Float;
  weight_in?: Float[] | Float;
  weight_not_in?: Float[] | Float;
  weight_lt?: Float;
  weight_lte?: Float;
  weight_gt?: Float;
  weight_gte?: Float;
  hp?: Int;
  hp_not?: Int;
  hp_in?: Int[] | Int;
  hp_not_in?: Int[] | Int;
  hp_lt?: Int;
  hp_lte?: Int;
  hp_gt?: Int;
  hp_gte?: Int;
  attack?: Int;
  attack_not?: Int;
  attack_in?: Int[] | Int;
  attack_not_in?: Int[] | Int;
  attack_lt?: Int;
  attack_lte?: Int;
  attack_gt?: Int;
  attack_gte?: Int;
  defense?: Int;
  defense_not?: Int;
  defense_in?: Int[] | Int;
  defense_not_in?: Int[] | Int;
  defense_lt?: Int;
  defense_lte?: Int;
  defense_gt?: Int;
  defense_gte?: Int;
  artwork?: String;
  artwork_not?: String;
  artwork_in?: String[] | String;
  artwork_not_in?: String[] | String;
  artwork_lt?: String;
  artwork_lte?: String;
  artwork_gt?: String;
  artwork_gte?: String;
  artwork_contains?: String;
  artwork_not_contains?: String;
  artwork_starts_with?: String;
  artwork_not_starts_with?: String;
  artwork_ends_with?: String;
  artwork_not_ends_with?: String;
  AND?: PokemonScalarWhereInput[] | PokemonScalarWhereInput;
  OR?: PokemonScalarWhereInput[] | PokemonScalarWhereInput;
  NOT?: PokemonScalarWhereInput[] | PokemonScalarWhereInput;
}

export interface PokemonUpsertWithWhereUniqueWithoutNextEvolutionsInput {
  where: PokemonWhereUniqueInput;
  update: PokemonUpdateWithoutNextEvolutionsDataInput;
  create: PokemonCreateWithoutNextEvolutionsInput;
}

export interface TypeCreateManyWithoutStrongWithInput {
  create?:
    | TypeCreateWithoutStrongWithInput[]
    | TypeCreateWithoutStrongWithInput;
  connect?: TypeWhereUniqueInput[] | TypeWhereUniqueInput;
}

export interface TypeUpdateManyDataInput {
  name?: String;
}

export interface TypeUpdateInput {
  name?: String;
  strongWith?: TypeUpdateManyWithoutStrongWithInput;
  weakWith?: TypeUpdateManyWithoutWeakWithInput;
  pokemons?: PokemonUpdateManyWithoutTypeInput;
}

export interface PokemonWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  nationalNumber?: Int;
  nationalNumber_not?: Int;
  nationalNumber_in?: Int[] | Int;
  nationalNumber_not_in?: Int[] | Int;
  nationalNumber_lt?: Int;
  nationalNumber_lte?: Int;
  nationalNumber_gt?: Int;
  nationalNumber_gte?: Int;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  height?: Float;
  height_not?: Float;
  height_in?: Float[] | Float;
  height_not_in?: Float[] | Float;
  height_lt?: Float;
  height_lte?: Float;
  height_gt?: Float;
  height_gte?: Float;
  weight?: Float;
  weight_not?: Float;
  weight_in?: Float[] | Float;
  weight_not_in?: Float[] | Float;
  weight_lt?: Float;
  weight_lte?: Float;
  weight_gt?: Float;
  weight_gte?: Float;
  hp?: Int;
  hp_not?: Int;
  hp_in?: Int[] | Int;
  hp_not_in?: Int[] | Int;
  hp_lt?: Int;
  hp_lte?: Int;
  hp_gt?: Int;
  hp_gte?: Int;
  attack?: Int;
  attack_not?: Int;
  attack_in?: Int[] | Int;
  attack_not_in?: Int[] | Int;
  attack_lt?: Int;
  attack_lte?: Int;
  attack_gt?: Int;
  attack_gte?: Int;
  defense?: Int;
  defense_not?: Int;
  defense_in?: Int[] | Int;
  defense_not_in?: Int[] | Int;
  defense_lt?: Int;
  defense_lte?: Int;
  defense_gt?: Int;
  defense_gte?: Int;
  type_every?: TypeWhereInput;
  type_some?: TypeWhereInput;
  type_none?: TypeWhereInput;
  artwork?: String;
  artwork_not?: String;
  artwork_in?: String[] | String;
  artwork_not_in?: String[] | String;
  artwork_lt?: String;
  artwork_lte?: String;
  artwork_gt?: String;
  artwork_gte?: String;
  artwork_contains?: String;
  artwork_not_contains?: String;
  artwork_starts_with?: String;
  artwork_not_starts_with?: String;
  artwork_ends_with?: String;
  artwork_not_ends_with?: String;
  previousEvolutions_every?: PokemonWhereInput;
  previousEvolutions_some?: PokemonWhereInput;
  previousEvolutions_none?: PokemonWhereInput;
  nextEvolutions_every?: PokemonWhereInput;
  nextEvolutions_some?: PokemonWhereInput;
  nextEvolutions_none?: PokemonWhereInput;
  AND?: PokemonWhereInput[] | PokemonWhereInput;
  OR?: PokemonWhereInput[] | PokemonWhereInput;
  NOT?: PokemonWhereInput[] | PokemonWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePokemon {
  count: Int;
}

export interface AggregatePokemonPromise
  extends Promise<AggregatePokemon>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePokemonSubscription
  extends Promise<AsyncIterator<AggregatePokemon>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Type {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
}

export interface TypePromise extends Promise<Type>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  strongWith: <T = FragmentableArray<Type>>(
    args?: {
      where?: TypeWhereInput;
      orderBy?: TypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  weakWith: <T = FragmentableArray<Type>>(
    args?: {
      where?: TypeWhereInput;
      orderBy?: TypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  pokemons: <T = FragmentableArray<Pokemon>>(
    args?: {
      where?: PokemonWhereInput;
      orderBy?: PokemonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TypeSubscription
  extends Promise<AsyncIterator<Type>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  strongWith: <T = Promise<AsyncIterator<TypeSubscription>>>(
    args?: {
      where?: TypeWhereInput;
      orderBy?: TypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  weakWith: <T = Promise<AsyncIterator<TypeSubscription>>>(
    args?: {
      where?: TypeWhereInput;
      orderBy?: TypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  pokemons: <T = Promise<AsyncIterator<PokemonSubscription>>>(
    args?: {
      where?: PokemonWhereInput;
      orderBy?: PokemonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PokemonEdge {
  node: Pokemon;
  cursor: String;
}

export interface PokemonEdgePromise extends Promise<PokemonEdge>, Fragmentable {
  node: <T = PokemonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PokemonEdgeSubscription
  extends Promise<AsyncIterator<PokemonEdge>>,
    Fragmentable {
  node: <T = PokemonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface TypeEdge {
  node: Type;
  cursor: String;
}

export interface TypeEdgePromise extends Promise<TypeEdge>, Fragmentable {
  node: <T = TypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface TypeEdgeSubscription
  extends Promise<AsyncIterator<TypeEdge>>,
    Fragmentable {
  node: <T = TypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PokemonConnection {
  pageInfo: PageInfo;
  edges: PokemonEdge[];
}

export interface PokemonConnectionPromise
  extends Promise<PokemonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PokemonEdge>>() => T;
  aggregate: <T = AggregatePokemonPromise>() => T;
}

export interface PokemonConnectionSubscription
  extends Promise<AsyncIterator<PokemonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PokemonEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePokemonSubscription>() => T;
}

export interface TypePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
}

export interface TypePreviousValuesPromise
  extends Promise<TypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface TypePreviousValuesSubscription
  extends Promise<AsyncIterator<TypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface PokemonPreviousValues {
  id: ID_Output;
  nationalNumber: Int;
  createdAt: DateTimeOutput;
  name: String;
  height?: Float;
  weight?: Float;
  hp?: Int;
  attack?: Int;
  defense?: Int;
  artwork?: String;
}

export interface PokemonPreviousValuesPromise
  extends Promise<PokemonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nationalNumber: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  height: () => Promise<Float>;
  weight: () => Promise<Float>;
  hp: () => Promise<Int>;
  attack: () => Promise<Int>;
  defense: () => Promise<Int>;
  artwork: () => Promise<String>;
}

export interface PokemonPreviousValuesSubscription
  extends Promise<AsyncIterator<PokemonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nationalNumber: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  height: () => Promise<AsyncIterator<Float>>;
  weight: () => Promise<AsyncIterator<Float>>;
  hp: () => Promise<AsyncIterator<Int>>;
  attack: () => Promise<AsyncIterator<Int>>;
  defense: () => Promise<AsyncIterator<Int>>;
  artwork: () => Promise<AsyncIterator<String>>;
}

export interface PokemonSubscriptionPayload {
  mutation: MutationType;
  node: Pokemon;
  updatedFields: String[];
  previousValues: PokemonPreviousValues;
}

export interface PokemonSubscriptionPayloadPromise
  extends Promise<PokemonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PokemonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PokemonPreviousValuesPromise>() => T;
}

export interface PokemonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PokemonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PokemonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PokemonPreviousValuesSubscription>() => T;
}

export interface TypeSubscriptionPayload {
  mutation: MutationType;
  node: Type;
  updatedFields: String[];
  previousValues: TypePreviousValues;
}

export interface TypeSubscriptionPayloadPromise
  extends Promise<TypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TypePreviousValuesPromise>() => T;
}

export interface TypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TypePreviousValuesSubscription>() => T;
}

export interface Pokemon {
  id: ID_Output;
  nationalNumber: Int;
  createdAt: DateTimeOutput;
  name: String;
  height?: Float;
  weight?: Float;
  hp?: Int;
  attack?: Int;
  defense?: Int;
  artwork?: String;
}

export interface PokemonPromise extends Promise<Pokemon>, Fragmentable {
  id: () => Promise<ID_Output>;
  nationalNumber: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  height: () => Promise<Float>;
  weight: () => Promise<Float>;
  hp: () => Promise<Int>;
  attack: () => Promise<Int>;
  defense: () => Promise<Int>;
  type: <T = FragmentableArray<Type>>(
    args?: {
      where?: TypeWhereInput;
      orderBy?: TypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  artwork: () => Promise<String>;
  previousEvolutions: <T = FragmentableArray<Pokemon>>(
    args?: {
      where?: PokemonWhereInput;
      orderBy?: PokemonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  nextEvolutions: <T = FragmentableArray<Pokemon>>(
    args?: {
      where?: PokemonWhereInput;
      orderBy?: PokemonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PokemonSubscription
  extends Promise<AsyncIterator<Pokemon>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nationalNumber: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  height: () => Promise<AsyncIterator<Float>>;
  weight: () => Promise<AsyncIterator<Float>>;
  hp: () => Promise<AsyncIterator<Int>>;
  attack: () => Promise<AsyncIterator<Int>>;
  defense: () => Promise<AsyncIterator<Int>>;
  type: <T = Promise<AsyncIterator<TypeSubscription>>>(
    args?: {
      where?: TypeWhereInput;
      orderBy?: TypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  artwork: () => Promise<AsyncIterator<String>>;
  previousEvolutions: <T = Promise<AsyncIterator<PokemonSubscription>>>(
    args?: {
      where?: PokemonWhereInput;
      orderBy?: PokemonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  nextEvolutions: <T = Promise<AsyncIterator<PokemonSubscription>>>(
    args?: {
      where?: PokemonWhereInput;
      orderBy?: PokemonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TypeConnection {
  pageInfo: PageInfo;
  edges: TypeEdge[];
}

export interface TypeConnectionPromise
  extends Promise<TypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TypeEdge>>() => T;
  aggregate: <T = AggregateTypePromise>() => T;
}

export interface TypeConnectionSubscription
  extends Promise<AsyncIterator<TypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTypeSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateType {
  count: Int;
}

export interface AggregateTypePromise
  extends Promise<AggregateType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTypeSubscription
  extends Promise<AsyncIterator<AggregateType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Type",
    embedded: false
  },
  {
    name: "Pokemon",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
