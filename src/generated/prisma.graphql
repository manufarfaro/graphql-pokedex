type AggregatePokemon {
  count: Int!
}

type AggregateType {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createPokemon(data: PokemonCreateInput!): Pokemon!
  updatePokemon(data: PokemonUpdateInput!, where: PokemonWhereUniqueInput!): Pokemon
  updateManyPokemons(data: PokemonUpdateManyMutationInput!, where: PokemonWhereInput): BatchPayload!
  upsertPokemon(where: PokemonWhereUniqueInput!, create: PokemonCreateInput!, update: PokemonUpdateInput!): Pokemon!
  deletePokemon(where: PokemonWhereUniqueInput!): Pokemon
  deleteManyPokemons(where: PokemonWhereInput): BatchPayload!
  createType(data: TypeCreateInput!): Type!
  updateType(data: TypeUpdateInput!, where: TypeWhereUniqueInput!): Type
  updateManyTypes(data: TypeUpdateManyMutationInput!, where: TypeWhereInput): BatchPayload!
  upsertType(where: TypeWhereUniqueInput!, create: TypeCreateInput!, update: TypeUpdateInput!): Type!
  deleteType(where: TypeWhereUniqueInput!): Type
  deleteManyTypes(where: TypeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Pokemon {
  id: ID!
  nationalNumber: Int!
  createdAt: DateTime!
  name: String!
  height: Float
  weight: Float
  hp: Int
  attack: Int
  defense: Int
  type(where: TypeWhereInput, orderBy: TypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Type!]
  artwork: String
  previousEvolutions(where: PokemonWhereInput, orderBy: PokemonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pokemon!]
  nextEvolutions(where: PokemonWhereInput, orderBy: PokemonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pokemon!]
}

type PokemonConnection {
  pageInfo: PageInfo!
  edges: [PokemonEdge]!
  aggregate: AggregatePokemon!
}

input PokemonCreateInput {
  nationalNumber: Int!
  name: String!
  height: Float
  weight: Float
  hp: Int
  attack: Int
  defense: Int
  type: TypeCreateManyWithoutPokemonsInput
  artwork: String
  previousEvolutions: PokemonCreateManyWithoutPreviousEvolutionsInput
  nextEvolutions: PokemonCreateManyWithoutNextEvolutionsInput
}

input PokemonCreateManyWithoutNextEvolutionsInput {
  create: [PokemonCreateWithoutNextEvolutionsInput!]
  connect: [PokemonWhereUniqueInput!]
}

input PokemonCreateManyWithoutPreviousEvolutionsInput {
  create: [PokemonCreateWithoutPreviousEvolutionsInput!]
  connect: [PokemonWhereUniqueInput!]
}

input PokemonCreateManyWithoutTypeInput {
  create: [PokemonCreateWithoutTypeInput!]
  connect: [PokemonWhereUniqueInput!]
}

input PokemonCreateWithoutNextEvolutionsInput {
  nationalNumber: Int!
  name: String!
  height: Float
  weight: Float
  hp: Int
  attack: Int
  defense: Int
  type: TypeCreateManyWithoutPokemonsInput
  artwork: String
  previousEvolutions: PokemonCreateManyWithoutPreviousEvolutionsInput
}

input PokemonCreateWithoutPreviousEvolutionsInput {
  nationalNumber: Int!
  name: String!
  height: Float
  weight: Float
  hp: Int
  attack: Int
  defense: Int
  type: TypeCreateManyWithoutPokemonsInput
  artwork: String
  nextEvolutions: PokemonCreateManyWithoutNextEvolutionsInput
}

input PokemonCreateWithoutTypeInput {
  nationalNumber: Int!
  name: String!
  height: Float
  weight: Float
  hp: Int
  attack: Int
  defense: Int
  artwork: String
  previousEvolutions: PokemonCreateManyWithoutPreviousEvolutionsInput
  nextEvolutions: PokemonCreateManyWithoutNextEvolutionsInput
}

type PokemonEdge {
  node: Pokemon!
  cursor: String!
}

enum PokemonOrderByInput {
  id_ASC
  id_DESC
  nationalNumber_ASC
  nationalNumber_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  height_ASC
  height_DESC
  weight_ASC
  weight_DESC
  hp_ASC
  hp_DESC
  attack_ASC
  attack_DESC
  defense_ASC
  defense_DESC
  artwork_ASC
  artwork_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PokemonPreviousValues {
  id: ID!
  nationalNumber: Int!
  createdAt: DateTime!
  name: String!
  height: Float
  weight: Float
  hp: Int
  attack: Int
  defense: Int
  artwork: String
}

input PokemonScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nationalNumber: Int
  nationalNumber_not: Int
  nationalNumber_in: [Int!]
  nationalNumber_not_in: [Int!]
  nationalNumber_lt: Int
  nationalNumber_lte: Int
  nationalNumber_gt: Int
  nationalNumber_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  height: Float
  height_not: Float
  height_in: [Float!]
  height_not_in: [Float!]
  height_lt: Float
  height_lte: Float
  height_gt: Float
  height_gte: Float
  weight: Float
  weight_not: Float
  weight_in: [Float!]
  weight_not_in: [Float!]
  weight_lt: Float
  weight_lte: Float
  weight_gt: Float
  weight_gte: Float
  hp: Int
  hp_not: Int
  hp_in: [Int!]
  hp_not_in: [Int!]
  hp_lt: Int
  hp_lte: Int
  hp_gt: Int
  hp_gte: Int
  attack: Int
  attack_not: Int
  attack_in: [Int!]
  attack_not_in: [Int!]
  attack_lt: Int
  attack_lte: Int
  attack_gt: Int
  attack_gte: Int
  defense: Int
  defense_not: Int
  defense_in: [Int!]
  defense_not_in: [Int!]
  defense_lt: Int
  defense_lte: Int
  defense_gt: Int
  defense_gte: Int
  artwork: String
  artwork_not: String
  artwork_in: [String!]
  artwork_not_in: [String!]
  artwork_lt: String
  artwork_lte: String
  artwork_gt: String
  artwork_gte: String
  artwork_contains: String
  artwork_not_contains: String
  artwork_starts_with: String
  artwork_not_starts_with: String
  artwork_ends_with: String
  artwork_not_ends_with: String
  AND: [PokemonScalarWhereInput!]
  OR: [PokemonScalarWhereInput!]
  NOT: [PokemonScalarWhereInput!]
}

type PokemonSubscriptionPayload {
  mutation: MutationType!
  node: Pokemon
  updatedFields: [String!]
  previousValues: PokemonPreviousValues
}

input PokemonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PokemonWhereInput
  AND: [PokemonSubscriptionWhereInput!]
  OR: [PokemonSubscriptionWhereInput!]
  NOT: [PokemonSubscriptionWhereInput!]
}

input PokemonUpdateInput {
  nationalNumber: Int
  name: String
  height: Float
  weight: Float
  hp: Int
  attack: Int
  defense: Int
  type: TypeUpdateManyWithoutPokemonsInput
  artwork: String
  previousEvolutions: PokemonUpdateManyWithoutPreviousEvolutionsInput
  nextEvolutions: PokemonUpdateManyWithoutNextEvolutionsInput
}

input PokemonUpdateManyDataInput {
  nationalNumber: Int
  name: String
  height: Float
  weight: Float
  hp: Int
  attack: Int
  defense: Int
  artwork: String
}

input PokemonUpdateManyMutationInput {
  nationalNumber: Int
  name: String
  height: Float
  weight: Float
  hp: Int
  attack: Int
  defense: Int
  artwork: String
}

input PokemonUpdateManyWithoutNextEvolutionsInput {
  create: [PokemonCreateWithoutNextEvolutionsInput!]
  delete: [PokemonWhereUniqueInput!]
  connect: [PokemonWhereUniqueInput!]
  set: [PokemonWhereUniqueInput!]
  disconnect: [PokemonWhereUniqueInput!]
  update: [PokemonUpdateWithWhereUniqueWithoutNextEvolutionsInput!]
  upsert: [PokemonUpsertWithWhereUniqueWithoutNextEvolutionsInput!]
  deleteMany: [PokemonScalarWhereInput!]
  updateMany: [PokemonUpdateManyWithWhereNestedInput!]
}

input PokemonUpdateManyWithoutPreviousEvolutionsInput {
  create: [PokemonCreateWithoutPreviousEvolutionsInput!]
  delete: [PokemonWhereUniqueInput!]
  connect: [PokemonWhereUniqueInput!]
  set: [PokemonWhereUniqueInput!]
  disconnect: [PokemonWhereUniqueInput!]
  update: [PokemonUpdateWithWhereUniqueWithoutPreviousEvolutionsInput!]
  upsert: [PokemonUpsertWithWhereUniqueWithoutPreviousEvolutionsInput!]
  deleteMany: [PokemonScalarWhereInput!]
  updateMany: [PokemonUpdateManyWithWhereNestedInput!]
}

input PokemonUpdateManyWithoutTypeInput {
  create: [PokemonCreateWithoutTypeInput!]
  delete: [PokemonWhereUniqueInput!]
  connect: [PokemonWhereUniqueInput!]
  set: [PokemonWhereUniqueInput!]
  disconnect: [PokemonWhereUniqueInput!]
  update: [PokemonUpdateWithWhereUniqueWithoutTypeInput!]
  upsert: [PokemonUpsertWithWhereUniqueWithoutTypeInput!]
  deleteMany: [PokemonScalarWhereInput!]
  updateMany: [PokemonUpdateManyWithWhereNestedInput!]
}

input PokemonUpdateManyWithWhereNestedInput {
  where: PokemonScalarWhereInput!
  data: PokemonUpdateManyDataInput!
}

input PokemonUpdateWithoutNextEvolutionsDataInput {
  nationalNumber: Int
  name: String
  height: Float
  weight: Float
  hp: Int
  attack: Int
  defense: Int
  type: TypeUpdateManyWithoutPokemonsInput
  artwork: String
  previousEvolutions: PokemonUpdateManyWithoutPreviousEvolutionsInput
}

input PokemonUpdateWithoutPreviousEvolutionsDataInput {
  nationalNumber: Int
  name: String
  height: Float
  weight: Float
  hp: Int
  attack: Int
  defense: Int
  type: TypeUpdateManyWithoutPokemonsInput
  artwork: String
  nextEvolutions: PokemonUpdateManyWithoutNextEvolutionsInput
}

input PokemonUpdateWithoutTypeDataInput {
  nationalNumber: Int
  name: String
  height: Float
  weight: Float
  hp: Int
  attack: Int
  defense: Int
  artwork: String
  previousEvolutions: PokemonUpdateManyWithoutPreviousEvolutionsInput
  nextEvolutions: PokemonUpdateManyWithoutNextEvolutionsInput
}

input PokemonUpdateWithWhereUniqueWithoutNextEvolutionsInput {
  where: PokemonWhereUniqueInput!
  data: PokemonUpdateWithoutNextEvolutionsDataInput!
}

input PokemonUpdateWithWhereUniqueWithoutPreviousEvolutionsInput {
  where: PokemonWhereUniqueInput!
  data: PokemonUpdateWithoutPreviousEvolutionsDataInput!
}

input PokemonUpdateWithWhereUniqueWithoutTypeInput {
  where: PokemonWhereUniqueInput!
  data: PokemonUpdateWithoutTypeDataInput!
}

input PokemonUpsertWithWhereUniqueWithoutNextEvolutionsInput {
  where: PokemonWhereUniqueInput!
  update: PokemonUpdateWithoutNextEvolutionsDataInput!
  create: PokemonCreateWithoutNextEvolutionsInput!
}

input PokemonUpsertWithWhereUniqueWithoutPreviousEvolutionsInput {
  where: PokemonWhereUniqueInput!
  update: PokemonUpdateWithoutPreviousEvolutionsDataInput!
  create: PokemonCreateWithoutPreviousEvolutionsInput!
}

input PokemonUpsertWithWhereUniqueWithoutTypeInput {
  where: PokemonWhereUniqueInput!
  update: PokemonUpdateWithoutTypeDataInput!
  create: PokemonCreateWithoutTypeInput!
}

input PokemonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nationalNumber: Int
  nationalNumber_not: Int
  nationalNumber_in: [Int!]
  nationalNumber_not_in: [Int!]
  nationalNumber_lt: Int
  nationalNumber_lte: Int
  nationalNumber_gt: Int
  nationalNumber_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  height: Float
  height_not: Float
  height_in: [Float!]
  height_not_in: [Float!]
  height_lt: Float
  height_lte: Float
  height_gt: Float
  height_gte: Float
  weight: Float
  weight_not: Float
  weight_in: [Float!]
  weight_not_in: [Float!]
  weight_lt: Float
  weight_lte: Float
  weight_gt: Float
  weight_gte: Float
  hp: Int
  hp_not: Int
  hp_in: [Int!]
  hp_not_in: [Int!]
  hp_lt: Int
  hp_lte: Int
  hp_gt: Int
  hp_gte: Int
  attack: Int
  attack_not: Int
  attack_in: [Int!]
  attack_not_in: [Int!]
  attack_lt: Int
  attack_lte: Int
  attack_gt: Int
  attack_gte: Int
  defense: Int
  defense_not: Int
  defense_in: [Int!]
  defense_not_in: [Int!]
  defense_lt: Int
  defense_lte: Int
  defense_gt: Int
  defense_gte: Int
  type_every: TypeWhereInput
  type_some: TypeWhereInput
  type_none: TypeWhereInput
  artwork: String
  artwork_not: String
  artwork_in: [String!]
  artwork_not_in: [String!]
  artwork_lt: String
  artwork_lte: String
  artwork_gt: String
  artwork_gte: String
  artwork_contains: String
  artwork_not_contains: String
  artwork_starts_with: String
  artwork_not_starts_with: String
  artwork_ends_with: String
  artwork_not_ends_with: String
  previousEvolutions_every: PokemonWhereInput
  previousEvolutions_some: PokemonWhereInput
  previousEvolutions_none: PokemonWhereInput
  nextEvolutions_every: PokemonWhereInput
  nextEvolutions_some: PokemonWhereInput
  nextEvolutions_none: PokemonWhereInput
  AND: [PokemonWhereInput!]
  OR: [PokemonWhereInput!]
  NOT: [PokemonWhereInput!]
}

input PokemonWhereUniqueInput {
  id: ID
  nationalNumber: Int
  name: String
}

type Query {
  pokemon(where: PokemonWhereUniqueInput!): Pokemon
  pokemons(where: PokemonWhereInput, orderBy: PokemonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pokemon]!
  pokemonsConnection(where: PokemonWhereInput, orderBy: PokemonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PokemonConnection!
  type(where: TypeWhereUniqueInput!): Type
  types(where: TypeWhereInput, orderBy: TypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Type]!
  typesConnection(where: TypeWhereInput, orderBy: TypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TypeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  pokemon(where: PokemonSubscriptionWhereInput): PokemonSubscriptionPayload
  type(where: TypeSubscriptionWhereInput): TypeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Type {
  id: ID!
  createdAt: DateTime!
  name: String!
  strongWith(where: TypeWhereInput, orderBy: TypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Type!]
  weakWith(where: TypeWhereInput, orderBy: TypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Type!]
  pokemons(where: PokemonWhereInput, orderBy: PokemonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pokemon!]
}

type TypeConnection {
  pageInfo: PageInfo!
  edges: [TypeEdge]!
  aggregate: AggregateType!
}

input TypeCreateInput {
  name: String!
  strongWith: TypeCreateManyWithoutStrongWithInput
  weakWith: TypeCreateManyWithoutWeakWithInput
  pokemons: PokemonCreateManyWithoutTypeInput
}

input TypeCreateManyWithoutPokemonsInput {
  create: [TypeCreateWithoutPokemonsInput!]
  connect: [TypeWhereUniqueInput!]
}

input TypeCreateManyWithoutStrongWithInput {
  create: [TypeCreateWithoutStrongWithInput!]
  connect: [TypeWhereUniqueInput!]
}

input TypeCreateManyWithoutWeakWithInput {
  create: [TypeCreateWithoutWeakWithInput!]
  connect: [TypeWhereUniqueInput!]
}

input TypeCreateWithoutPokemonsInput {
  name: String!
  strongWith: TypeCreateManyWithoutStrongWithInput
  weakWith: TypeCreateManyWithoutWeakWithInput
}

input TypeCreateWithoutStrongWithInput {
  name: String!
  weakWith: TypeCreateManyWithoutWeakWithInput
  pokemons: PokemonCreateManyWithoutTypeInput
}

input TypeCreateWithoutWeakWithInput {
  name: String!
  strongWith: TypeCreateManyWithoutStrongWithInput
  pokemons: PokemonCreateManyWithoutTypeInput
}

type TypeEdge {
  node: Type!
  cursor: String!
}

enum TypeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TypePreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
}

input TypeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TypeScalarWhereInput!]
  OR: [TypeScalarWhereInput!]
  NOT: [TypeScalarWhereInput!]
}

type TypeSubscriptionPayload {
  mutation: MutationType!
  node: Type
  updatedFields: [String!]
  previousValues: TypePreviousValues
}

input TypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TypeWhereInput
  AND: [TypeSubscriptionWhereInput!]
  OR: [TypeSubscriptionWhereInput!]
  NOT: [TypeSubscriptionWhereInput!]
}

input TypeUpdateInput {
  name: String
  strongWith: TypeUpdateManyWithoutStrongWithInput
  weakWith: TypeUpdateManyWithoutWeakWithInput
  pokemons: PokemonUpdateManyWithoutTypeInput
}

input TypeUpdateManyDataInput {
  name: String
}

input TypeUpdateManyMutationInput {
  name: String
}

input TypeUpdateManyWithoutPokemonsInput {
  create: [TypeCreateWithoutPokemonsInput!]
  delete: [TypeWhereUniqueInput!]
  connect: [TypeWhereUniqueInput!]
  set: [TypeWhereUniqueInput!]
  disconnect: [TypeWhereUniqueInput!]
  update: [TypeUpdateWithWhereUniqueWithoutPokemonsInput!]
  upsert: [TypeUpsertWithWhereUniqueWithoutPokemonsInput!]
  deleteMany: [TypeScalarWhereInput!]
  updateMany: [TypeUpdateManyWithWhereNestedInput!]
}

input TypeUpdateManyWithoutStrongWithInput {
  create: [TypeCreateWithoutStrongWithInput!]
  delete: [TypeWhereUniqueInput!]
  connect: [TypeWhereUniqueInput!]
  set: [TypeWhereUniqueInput!]
  disconnect: [TypeWhereUniqueInput!]
  update: [TypeUpdateWithWhereUniqueWithoutStrongWithInput!]
  upsert: [TypeUpsertWithWhereUniqueWithoutStrongWithInput!]
  deleteMany: [TypeScalarWhereInput!]
  updateMany: [TypeUpdateManyWithWhereNestedInput!]
}

input TypeUpdateManyWithoutWeakWithInput {
  create: [TypeCreateWithoutWeakWithInput!]
  delete: [TypeWhereUniqueInput!]
  connect: [TypeWhereUniqueInput!]
  set: [TypeWhereUniqueInput!]
  disconnect: [TypeWhereUniqueInput!]
  update: [TypeUpdateWithWhereUniqueWithoutWeakWithInput!]
  upsert: [TypeUpsertWithWhereUniqueWithoutWeakWithInput!]
  deleteMany: [TypeScalarWhereInput!]
  updateMany: [TypeUpdateManyWithWhereNestedInput!]
}

input TypeUpdateManyWithWhereNestedInput {
  where: TypeScalarWhereInput!
  data: TypeUpdateManyDataInput!
}

input TypeUpdateWithoutPokemonsDataInput {
  name: String
  strongWith: TypeUpdateManyWithoutStrongWithInput
  weakWith: TypeUpdateManyWithoutWeakWithInput
}

input TypeUpdateWithoutStrongWithDataInput {
  name: String
  weakWith: TypeUpdateManyWithoutWeakWithInput
  pokemons: PokemonUpdateManyWithoutTypeInput
}

input TypeUpdateWithoutWeakWithDataInput {
  name: String
  strongWith: TypeUpdateManyWithoutStrongWithInput
  pokemons: PokemonUpdateManyWithoutTypeInput
}

input TypeUpdateWithWhereUniqueWithoutPokemonsInput {
  where: TypeWhereUniqueInput!
  data: TypeUpdateWithoutPokemonsDataInput!
}

input TypeUpdateWithWhereUniqueWithoutStrongWithInput {
  where: TypeWhereUniqueInput!
  data: TypeUpdateWithoutStrongWithDataInput!
}

input TypeUpdateWithWhereUniqueWithoutWeakWithInput {
  where: TypeWhereUniqueInput!
  data: TypeUpdateWithoutWeakWithDataInput!
}

input TypeUpsertWithWhereUniqueWithoutPokemonsInput {
  where: TypeWhereUniqueInput!
  update: TypeUpdateWithoutPokemonsDataInput!
  create: TypeCreateWithoutPokemonsInput!
}

input TypeUpsertWithWhereUniqueWithoutStrongWithInput {
  where: TypeWhereUniqueInput!
  update: TypeUpdateWithoutStrongWithDataInput!
  create: TypeCreateWithoutStrongWithInput!
}

input TypeUpsertWithWhereUniqueWithoutWeakWithInput {
  where: TypeWhereUniqueInput!
  update: TypeUpdateWithoutWeakWithDataInput!
  create: TypeCreateWithoutWeakWithInput!
}

input TypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  strongWith_every: TypeWhereInput
  strongWith_some: TypeWhereInput
  strongWith_none: TypeWhereInput
  weakWith_every: TypeWhereInput
  weakWith_some: TypeWhereInput
  weakWith_none: TypeWhereInput
  pokemons_every: PokemonWhereInput
  pokemons_some: PokemonWhereInput
  pokemons_none: PokemonWhereInput
  AND: [TypeWhereInput!]
  OR: [TypeWhereInput!]
  NOT: [TypeWhereInput!]
}

input TypeWhereUniqueInput {
  id: ID
  name: String
}

type User {
  id: ID!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
